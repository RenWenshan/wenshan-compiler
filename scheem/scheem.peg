// parse an scheem expression
start =
    expression

comment =
    ";;" (!newline .)*

expression =
    single_atom
    / parenthesis_expression

single_atom =
    space* expr:atom space*
    {return expr;}

parenthesis_expression =
    expression_3
    / expression_1
    / expression_2

// simple expression
expression_1 =
    space* '(' space* atoms:atomlist space* ')' space*
    {return atoms;}

// normal expressions, contains atoms and expressions
expression_2 =
    space* '(' space* left:atomlist space* expr:expression* space* right:atomlist space* ')' space*
    {return left.concat(expr).concat(right);}

// quote expression
expression_3 =
    space* quote expr: expression space*
    {return ["quote", expr]}

validchar =
    [0-9a-zA-Z_?!+\-=@#$%^&*/.]

space =
    whitespace
    / table
    / newline
    / comment


whitespace =
    ' '

table =
    [\t]

newline =
    [\r\n]

atom =
    number
    / string

number =
    float_num
    / integer

float_num =
    first:[+-]? second:"0." rest:decimal_digit+
    {return parseFloat(first + second + rest.join(""));}
    / first:[+-]? second:non_zero_digit third:decimal_digit* "." rest:decimal_digit+
    {return parseFloat(first + second + third.join("") + "." + rest.join(""));}

integer =
    first:[+-]? second:"0" {return parseInt(first + second);}
    / first:[+-]? second:non_zero_digit rest:decimal_digit*
    {return parseInt(first + second + rest.join(""));}

decimal_digit
  = [0-9]

non_zero_digit
  = [1-9]

string =
    chars:validchar+
    {return chars.join("");}

spaceatom =
    space+ second:atom
    {return second;}

atomlist =
    atoms:spaceatom*
    {return atoms;}

quote =
    "'"
